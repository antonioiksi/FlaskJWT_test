#!/usr/bin/env python3.5
# -*- coding: utf-8 -*-
import sys
import json
import RPi.GPIO as GPIO
from flask import Flask, request, json, jsonify
from flask_jwt import JWT, jwt_required, current_identity
from werkzeug.security import safe_str_cmp
import subprocess
from subprocess import Popen, PIPE, call

class User(object):
    def __init__(self, id, username, password):
        self.id = id
        self.username = username
        self.password = password

    def __str__(self):
        return "User(id='%s')" % self.id


users = [
    User(1, 'user1', 'abcxyz'),
    User(2, 'user2', 'abcxyz'),
]

username_table = {u.username: u for u in users}
userid_table = {u.id: u for u in users}


def authenticate(username, password):
    user = username_table.get(username, None)
    if user and safe_str_cmp(user.password.encode('utf-8'), password.encode('utf-8')):
        return user


def identity(payload):
    user_id = payload['identity']
    return userid_table.get(user_id, None)


app = Flask(__name__)
app.debug = True
app.config['SECRET_KEY'] = 'super-secret'

jwt = JWT(app, authenticate, identity)


@app.route('/protected')
@jwt_required()
def protected():
    return '%s' % current_identity


@app.route('/on')
#@jwt_required()
def on():
    # insert code for RASPBERRY
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    gpio_pin_number = 12
    GPIO.setup(gpio_pin_number, GPIO.OUT)
    GPIO.output(gpio_pin_number, GPIO.HIGH)    
    result = {"message": "Device is ON"}
    print("ON")
    return json.dumps(result)


@app.route('/off')
#@jwt_required()
def off():
    # insert code for RASPBERRY
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    gpio_pin_number = 12
    GPIO.setup(gpio_pin_number, GPIO.OUT)
    GPIO.output(gpio_pin_number, GPIO.LOW)
    result = {"message": "Device is OFF"}
    print("OFF")
    return json.dumps(result)



@app.route('/free')
def free():
    return "Hello free"

@app.route('/free-put', methods=['PUT'])
def free_put():
    if request.method == 'PUT':
        print("put")
        data = request.get_json()
        response = app.response_class(response = json.dumps(data),status = 200, mimetype = 'application/json' )
        return response

@app.route('/pump')
def pump():
    txt = '''cat /sys/class/gpio/gpio12/value'''
    ret = Popen("%s" %txt, shell=True,  stdout = PIPE)
    ret.wait()
    res = ret.communicate()
    print(res)
    print(res[0])
    res[0] = bytes(res[0], 'utf-8')
    res=res[0].replace("\n"," ")
    print(res)
    res = int(res)
    if res == 1:
#        print("ura")
        message = {"status":"Pump is being turned on"}
    else:
#        print("no")
        message = {"status":"Pump is being turned off"}
    js = json.dumps(message)
cat /sys/class/gpio/gpio12/value    resp = Response(js, status=200, mimetype='application/json')
    return response

if __name__ == '__main__':
    app.run(host='0.0.0.0', debug=True)
